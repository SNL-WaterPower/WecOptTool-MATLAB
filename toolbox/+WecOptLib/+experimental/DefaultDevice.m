classdef DefaultDevice < WecOptLib.experimental.base.Device
    % Class representing a device with a given geometry and contoller
    % configuration. DefaultDevice objects should only be created using the
    % ``makeDevice`` method of the 
    % :mat:class:`+WecOptLib.+experimental.DefaultBlueprint` class.
    %
    % Attributes:
    %     hydro (Hydro):
    %         The Hydro object assosiated to this device geometry
    %     motion (Motion):
    %         The Motion object generated by the last call of `simulate`.
    %         Empty by default
    %     performance (Performance)
    %         The Performance object generated by the last call of 
    %         `simulate`. Empty by default.
    %
    
    % Copyright 2020 National Technology & Engineering Solutions of Sandia, 
    % LLC (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the 
    % U.S. Government retains certain rights in this software.
    %
    % This file is part of WecOptTool.
    % 
    %     WecOptTool is free software: you can redistribute it and/or 
    %     modify it under the terms of the GNU General Public License as 
    %     published by the Free Software Foundation, either version 3 of 
    %     the License, or (at your option) any later version.
    % 
    %     WecOptTool is distributed in the hope that it will be useful,
    %     but WITHOUT ANY WARRANTY; without even the implied warranty of
    %     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    %     GNU General Public License for more details.
    % 
    %     You should have received a copy of the GNU General Public 
    %     License along with WecOptTool.  If not, see 
    %     <https://www.gnu.org/licenses/>. 
    properties 
        hydro
        motion
        performance
    end
    
    properties (Access = private)
        staticMotion
        dynamicModelCB
        controllerCB
    end
    
    methods (Access = {?WecOptLib.experimental.DefaultBlueprint})
        
        function obj = DefaultDevice(hydro,                ...
                                     staticModelCallback,  ...
                                     dynamicModelCallback, ...
                                     controllerCallbBack)
                          
            obj.hydro = hydro;
            obj.staticMotion = staticModelCallback(hydro);
            obj.dynamicModelCB = dynamicModelCallback;
            obj.controllerCB = controllerCallbBack;
            
        end
        
    end
    
    methods
        
        function simulate(obj, SeaState)
            % Determine the performace of the WEC device
            %
            % Arguments:
            %     SeaState (SeaState):
            %         The sea-state to be simulated
            %

            obj.motion = obj.dynamicModelCB(obj.staticMotion, ...
                                            obj.hydro,        ...
                                            SeaState);
            
            fn = fieldnames(obj.staticMotion);
            for i = 1:length(fn)
                obj.motion.(fn{i}) = obj.staticMotion.(fn{i});
            end
            
            obj.performance = obj.controllerCB(obj.motion, SeaState);
                                
        end
    
    end
    
end
